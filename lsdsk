#!/bin/bash
##Version 3.0.0-0
#
#License: GPL
#
#Author: Andy Crowd
#Tested in Arch Linux
#Search in *.desktop for "Categories" and "Exec"
#
DskPath[0]="/usr/share/applications/"
DskPath[1]="$HOME/.local/share/applications/"

DskPath[2]="/usr/local/share/applications"

DskPath[3]="/etc/xdg/autostart/"
DskPath[4]="$HOME/.config/autostart/"

DskPath[5]="$XDG_CONFIG_DIRS/autostart/"
DskPath[6]="$XDG_CONFIG_HOME/autostart/"

DskPath[7]="/usr/share/gnome/autostart/"

#### Search with no subdirs # This is an example
## !!!!  some of the desktop environments can create the
## "Desktop" destination with another name, you must modify the script to fit your needs !!!!!
MaxDepth[8]="-maxdepth 1"
DskPath[8]="$HOME/Desktop"
####

DskPath[9]="/usr/etc/xdg/autostart/"
DskPath[10]="/usr/share/mimelnk/application/"
DskPath[11]="/usr/share/mimelnk/chemical/"
DskPath[12]="/usr/lib/libreoffice/share/xdg/"
DskPath[13]="/usr/share/xsessions/"
DskPath[14]="/usr/share/apps/kdm/sessions/"
DskPath[15]="/usr/share/gdm/greeter/autostart/"
DskPath[16]="/usr/share/wayland-sessions/"
DskPath[17]="/usr/share/apps/kdm/programs/"
DskPath[18]="/usr/share/mate/wm-properties/"

DskPath[19]="/usr/share/wayland-sessions/"

DskPath[20]="/usr/share/apps/solid/actions/"

DskPath[21]="/usr/share/xfce4/helpers/"
### /kde/ and /kde6/ are not actual, it might be the folders names of the future or past
DskPath[22]="/usr/share/kde/apps/solid/actions/"
DskPath[23]="/usr/share/kde4/apps/solid/actions/"
DskPath[22]="/usr/share/kde5/apps/solid/actions/"
DskPath[23]="/usr/share/kde6/apps/solid/actions/"

DskPath[24]="/usr/share/xgreeters/"

DskPath[25]="/usr/share/dist/desktop-files/default/"
DskPath[26]="/usr/share/parole/"
DskPath[27]="/usr/share/mimelnk/application/"
DskPath[28]="/usr/share/gnome/autostart/"

DskPath[29]="/usr/share/Thunar/sendto/"
DskPath[30]="/usr/share/gdm/autostart/"
DskPath[31]="/usr/share/mga/"


One=$1
Two=$2
Three=$3

ListDefault(){

for fdPath in "${DskPath[@]}";do

if [[ -d "${DskPath[Count]}" || -f "${DskPath[Count]}"  ]];
 then
  printf "\e[1;36m ${fdPath} \e[0m \n";
   if [ ! -z "$One" ] && [[ -d "${fdPath}"  || -f "${fdPath}" ]] ;
    then

     find "${fdPath}" ${MaxDepth[Count]}  -iname "*\.desktop" -exec awk -v Fil="{}"  -v Seek="$One" -F"=" '//{
if(index($0,"Categories=") >= 1) Ctgr=substr($0,index($0,"=")+1);
if(index($0,"Name=")       == 1) inNm=substr($0,index($0,"=")+1);
if(index($0,"Comment=")    == 1) inComment=substr($0,index($0,"=")+1);
if(index($0,"Command")     == 1) inCmd=substr($0,index($0,"=")+1) ;
if(index($0,"Module=")     == 1) inExc=substr($0,index($0,"=")+1);
if(index($0,"Exec=")       == 1) inExc=substr($0,index($0,"=")+1);


if(index($0,"Category=") >= 1) Ctgr=substr($0,index($0,"=")+1);
if(index($0,"X-XFCE-Binaries=") >= 1) inExc=substr($0,index($0,"=")+1);

     }END{
if(! Ctgr ){E=inNm}else{E=Ctgr};
if(! inExc){CmdLine=inCmd}else{CmdLine=inExc};
if(! E)E=inComment;
 Z=CmdLine" Ã‚Â¤ "E" Ã‚Â¤ "Fil;
if( index(tolower(Z),tolower(Seek)) && CmdLine  )  print Z;}' "{}" \;
    
    else
[[ -d "${fdPath}"  || -f "${fdPath}" ]] && find "${fdPath}" -iname "*.desktop" -exec awk -v Fil="{}"  -F"=" '//{
if(index($0,"Categories") == 1) Ctgr=substr($0,index($0,"=")+1);
if(index($0,"Name=")      == 1) inNm=substr($0,index($0,"=")+1);
if(index($0,"Exec=")      == 1) inExc=substr($0,index($0,"=")+1);
if(index($0,"Comment=")   == 1) inComment=substr($0,index($0,"=")+1);
if(index($0,"Command=")   == 1) inCmd=substr($0,index($0,"=")+1) ;

if(index($0,"Category=") >= 1) Ctgr=substr($0,index($0,"=")+1);
if(index($0,"X-XFCE-Binaries=") >= 1) inExc=substr($0,index($0,"=")+1);

}END{
if(! Ctgr ){E=inNm}else{E=Ctgr};
if(! inExc){CmdLine=inCmd}else{CmdLine=inExc};
if(! E)E=inComment;
 Z=CmdLine" Ã‚Â¤ "E" Ã‚Â¤ "Fil" Ã‚Â¤ "XFCEb;
if(CmdLine)print Z;}' "{}" \;
 fi;
fi

done
}
###################  Search specific ####

SearchContentOfVariable(){
for fdPath in "${DskPath[@]}";do

if [[ -d "${DskPath[Count]}" || -f "${DskPath[Count]}"  ]];
 then
  printf "\e[1;36m ${fdPath} \e[0m \n";
   if [ ! -z "$One" ] && [[ -d "${fdPath}"  || -f "${fdPath}" ]] ;
    then 
	    grep -e ^"$Var" $Additional -H -R --include \*.desktop "${fdPath}" 
   fi;
fi

done
}
###################
###################

case "$1" in

--help ) 
	echo "OPTIONS
--help : show this help message
--var variable : search for variable in the *.desktop
--seek-to-dump | --sstd : search in  /  and show all content (may need root rights)
Usage:
List content with default options:
 lsdsk
Search only for specific text in default output:
 lsdsk gtk
 lsdsk game
Use --var option (supports grep syntax):
--var Name=
--var 'Name\[zn_CN\]'"
	;;
--var )
if [[  ! -z "$2"    ]];then  
	Var="$2"
 if [[ "$#" -gt 2  ]];then 
OptionsToGrep=($@);
Additional="${OptionsToGrep[@]:2}"  ;
 fi;
	SearchContentOfVariable
else
	echo "Error, parameter to --var is missing
example: --var MimeType"
 fi	

;;
--seek-to-dump | --sstd ) 
	grep -i ^""  -H -R --include \*.desktop "/"
	;;
* ) 
	ListDefault
	;;

esac
